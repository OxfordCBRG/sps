#!/bin/bash

# For regular jobs, the Job ID is sufficient. However, for array jobs,
# we need to reconstruct the special array job ID and set the Job ID
# to that. If we're not in a job, use a default.
JID=${SLURM_JOB_ID}
AID=${SLURM_ARRAY_JOB_ID}
TID=${SLURM_ARRAY_TASK_ID}
if [ ! -z $AID ] && [ ! -z $TID ]; then
  JID=`echo sps-${AID}_${TID}`
elif [ ! -z $JID ]; then
  JID=`echo sps-$JID`
else
  JID=`echo sps`
fi

SPSLOG="${JID}.log"
SPSPID=`grep -s SPS_PROCESS "$SPSLOG" | awk '{print $2}'`
# Check non-value
if [ -z "$SPSPID" ]; then
  echo Could not determine SPS proccess ID
  exit 1
fi
# Check non-numeric value
RE='^[0-9]+$'
if ! [[ "$SPSPID" =~ $RE ]] ; then
  echo Non-numeric PID "$SPSPID"
  exit 1
fi
# Double check PID hasn't ended
PIDCOMM=`ps -p "$SPSPID" -h -o comm`
if [ -z "$PIDCOMM" ]; then
  echo PID "$SPSPID" is no longer running
  exit 1
fi
# Double check PID hasn't been reused for something else.
if [ $PIDCOMM != "sps" ]; then
  echo PID "$SPSPID" has been reused for "$PIDCOMM"
  exit 1
fi

kill "$SPSPID"

fix_output () {
  OUT="${JID}-${1}.tsv"
  BAK="${OUT}.bak"
  # If we got killed in the middle of a rewrite, there may be a backup file
  if [ -f "$BAK" ]; then
    # There might also be a normal file. If so, it's corrupt.
    if [ -f "$OUT" ]; then
      rm -f "$OUT" 
    fi
    # Either way there isn't now, so restore the backup.
    mv "$BAK" "$OUT" 
  fi

  # If it all went horribly wrong, there may be no output either
  if [ ! -f "$OUT" ]; then
    echo "No output "$OUT" found"
    return 1
  fi
}

fix_output "cpu" &
fix_output "mem" &
fix_output "read" &
fix_output "write" &

wait # For background tasks
