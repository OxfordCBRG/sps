#!/bin/bash

module load gnuplot

do_ascii_plot () {
  COMM="set terminal dumb 80 30; set title '$2'; set xlabel 'Job profiling step'; set key above; plot "
  read -r -a array <<< `head -1 $1`
  N="${#array[@]}"
  for X in `seq 2 $N`; do
    Y=`echo ${X}-1 | bc`
    COMM+="\"$1\" using $X title \"""${array[$Y]}""\" with lines,"
  done
  echo ${COMM:0:-1} | gnuplot | tr '[:cntrl:]' '\n' &> "$FILE".ascii 
}

do_png_plot () {
  COMM="set terminal png size 1200,800 enhanced font 'Helvetica,16'; set output '${FILE}.png'; set title '$2'; set title font 'Helvetica,20'; set xlabel 'Job profiling step'; set key outside; set key right top; plot "
  read -r -a array <<< `head -1 $1`
  N="${#array[@]}"
  for X in `seq 2 $N`; do
    Y=`echo ${X}-1 | bc`
    COMM+="\"$1\" using $X title \"""${array[$Y]}""\" with lines,"
  done
  echo ${COMM:0:-1} | gnuplot
}

for FILE in $@; do
  if [ -f "$FILE" ]; then
    if [[ "$FILE" =~ "cpu.tsv" ]]; then
      do_ascii_plot "$FILE" "CPU (cores)" &
      do_png_plot "$FILE" "CPU (cores)" &
    elif [[ "$FILE" =~ "mem.tsv" ]]; then
      do_ascii_plot "$FILE" "Memory (kilobytes)" &
      do_png_plot "$FILE" "Memory (kilobytes)" &
    elif [[ "$FILE" =~ "read.tsv" ]]; then
      do_ascii_plot "$FILE" "Data read (bytes)" &
      do_png_plot "$FILE" "Data read (bytes)" &
    elif [[ "$FILE" =~ "write.tsv" ]]; then
      do_ascii_plot "$FILE" "Data written (bytes)" &
      do_png_plot "$FILE" "Data written (bytes)" &
    else
      echo Unknown input "$FILE"
    fi
  fi
done

wait # For background processes
